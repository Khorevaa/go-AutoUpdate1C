package update

import (
	"fmt"

	"github.com/Khorevaa/go-v8runner"
	log "github.com/sirupsen/logrus"
)

type Обновление struct {
	*v8runner.Конфигуратор

	СтрокаПодключения                string
	Пользователь                     string
	Пароль                           string
	КлючРазрешенияЗапуска            string
	ФайлОбновления                   string
	ВыполнитьЗагрузкуВместоОбновения bool
	ИспользоватьПолныйДистрибутив    bool
	НаСервере                        bool

	ФайлОбработкиПриЗапуске string

	СеансыПользователей *УправлениеСеансамиПользователей
	УправлениеБекапами  *УправлениеБекапами

	ДополнительныеПараметры []string
	logger                  *log.Entry
}

func (о *Обновление) УстановитьЛог(context func(f log.Fields) *log.Entry) {

	о.logger = context(log.Fields{"СтрокаПодключения": о.СтрокаПодключения, "Пользователь": о.Пользователь})
}

func НовоеОбновление(строкаПодключения, пользователь, пароль, ключРазрешенияЗапуска string) *Обновление {

	return &Обновление{
		СтрокаПодключения:     строкаПодключения,
		Пользователь:          пользователь,
		Пароль:                пароль,
		КлючРазрешенияЗапуска: ключРазрешенияЗапуска,
		Конфигуратор:          v8runner.НовыйКонфигуратор(),
	}

}

func (о *Обновление) УстановитьВерсиюПлатформы(ВерсияПлатформы string) (e error) {

	e = о.Конфигуратор.УстановитьВерсиюПлатформы(ВерсияПлатформы)

	return
}

func (о *Обновление) УстановитьКлючРазрешенияЗапуска() {

	if len(о.КлючРазрешенияЗапуска) == 0 {
		return
	}

	о.ДополнительныеПараметры = append(о.ДополнительныеПараметры, fmt.Sprintf("/UC%s", о.КлючРазрешенияЗапуска))

}

func (о *Обновление) выполнитьОбновлениеКонфигурации() (e error) {

	о.УстановитьКлючСоединенияСБазой(о.СтрокаПодключения)

	e = о.ОбновитьКонфигурацию(о.ФайлОбновления, о.ИспользоватьПолныйДистрибутив, true, о.НаСервере, false, о.ДополнительныеПараметры...)

	return
}

func (о *Обновление) ВыполнитьОбновление() (e error) {

	о.logger.Infof("Выполняю обновление информационной базы")
	if о.ВыполнитьЗагрузкуВместоОбновения {
		e = о.выполнитьЗагрузкуКонфигурации()
	} else {
		e = о.выполнитьОбновлениеКонфигурации()
	}

	if e != nil {
		о.logger.WithError(e).Warning("Ошибка выполнения обновления")
	}

	return

}

func (о *Обновление) выполнитьЗагрузкуКонфигурации() (e error) {

	о.УстановитьКлючСоединенияСБазой(о.СтрокаПодключения)

	о.logger.Infof(">> Загрузка конфигурации в информационную базу")

	e = о.ЗагрузитьКонфигурациюИзФайла(о.ФайлОбновления) // Не сработает.., о.ДополнительныеПараметры...)

	if e != nil {
		return
	}

	о.logger.Infof(">> Обновление конфигурации в информационной базе")
	e = о.ОбновитьКонфигурациюБазыДанных(false, о.НаСервере, false, о.ДополнительныеПараметры...)

	return
}

func (о *Обновление) ВыполнитьЗапускВРежимеПредприятия() (e error) {

	о.УстановитьКлючСоединенияСБазой(о.СтрокаПодключения)

	e = о.ЗапуститьВРежимеПредприятия(false, о.ДополнительныеПараметры...)

	return

}

type УправлениеСеансамиПользователей struct {
}

type УправлениеБекапами struct {
}
